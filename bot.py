import os
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from datetime import datetime, timedelta
from dotenv import load_dotenv

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
load_dotenv()
bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('vpn_bot.db')
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER UNIQUE NOT NULL,
        username TEXT,
        subscription_end TEXT,
        stars_balance INTEGER DEFAULT 0,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    conn.commit()
    conn.close()

# –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
init_db()

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
def get_db_connection():
    conn = sqlite3.connect('vpn_bot.db')
    conn.row_factory = sqlite3.Row
    return conn

def add_user(user_id: int, username: str = ""):
    conn = get_db_connection()
    try:
        conn.execute(
            "INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)",
            (user_id, username)
        )
        conn.commit()
    finally:
        conn.close()

def get_user(user_id: int):
    conn = get_db_connection()
    try:
        return conn.execute(
            "SELECT * FROM users WHERE user_id = ?", 
            (user_id,)
        ).fetchone()
    finally:
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    add_user(message.from_user.id, message.from_user.username or "")
    
    await message.answer(
        "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN —Å–µ—Ä–≤–∏—Å!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/buy - –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
        reply_markup=main_menu_kb()
    )

@dp.message(Command("profile"))
async def cmd_profile(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
    
    sub_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if user["subscription_end"] and \
        datetime.strptime(user["subscription_end"], "%Y-%m-%d") > datetime.now() \
        else "‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
    
    await message.answer(
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"ID: {user['user_id']}\n"
        f"Stars: {user['stars_balance']}\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞: {sub_status}\n"
        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user['subscription_end'] or '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏'}"
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_kb():
    kb = [
        [types.KeyboardButton(text="üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
        [types.KeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")]
    ]
    return types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())